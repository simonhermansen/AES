####################################################################################################
# TESTS
import AES
import Transformations

plaintext = bytes([0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34])
key = bytearray([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])
encrypted = bytes([0x39, 0x25, 0x84, 0x1d, 0x2, 0xdc, 0x9, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0xb, 0x32])

test1 = bytes([0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff])
key1 = bytearray([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f])
cypher1 = bytes([0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x4, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a])

key2 = bytearray([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17])
cypher2 = bytes([0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0xd, 0x71, 0x91])

key3 = bytearray([0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f])

cypher3 = bytes([0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89])

# AES.cypher(test1, key3)
# AES.inv_cypher(cypher3, key3)

# test_key = Transformations.generate_key(192)
# print(Transformations.read_key())
#
message = 'Crazy? I was crazy once... They locked me in a room, a room full of rats. And that made me crazy'
encoded = AES.encrypt(message)
#
AES.decrypt(encoded)




# def encrypt(arrayified_message):
#     cypher = np.array([])
#     for word in arrayified_message:
#         cypher = np.append(AES.cypher(word, Transformations.read_key()), cypher)
#     print(cypher)
#     return cypher
#
#
# def decrypt(cypher):
#     message = ''
#     for word in reversed(cypher):
#         decoded = AES.inv_cypher(word, Transformations.read_key()).decode('utf-8')
#         message += decoded
#     print(message)
#     return message



# def arrayify(message):
#     arrayified_message = np.array([])
#     pad_len = 16 * math.ceil(len(message)/16)
#     encoded = message.ljust(pad_len).encode('utf-8')
#     slices = int(len(encoded)/16)
#     for i in range(slices):
#         word = encoded[slice(16*i, 16*(i+1))]
#         arrayified_message = np.append(arrayified_message, word)
#     return arrayified_message

# arr = np.array([0xa6, 0xe4, 0xa4, 0xad, 0x28, 0xad, 0xdf, 0x2, 0x33, 0x82, 0x5c, 0x71, 0x6c, 0x9, 0x9a, 0xf4])

# AES.inv_cypher(arr, test_key)
